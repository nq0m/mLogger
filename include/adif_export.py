# ADIF export utility for mLogger

def contact_to_adif(contact):
    """
    Convert a contact dict to ADIF QSO record string.
    Required ADIF fields: CALL, QSO_DATE, TIME_ON, BAND, MODE
    Optional: RST_SENT, RST_RCVD, PARK, FREQ, COMMENTS
    """
    # Map mLogger fields to ADIF
    adif_map = {
        'callsign': 'CALL',
        'sent_rst': 'RST_SENT',
        'recv_rst': 'RST_RCVD',
        'park': 'SIG_INFO',
        'frequency': 'FREQ',
        'mode': 'MODE',
        'comments': 'COMMENT',
    }
    # Date/time conversion
    ts = contact.get('timestamp', '')
    qso_date = ts[:10].replace('-', '')  # YYYYMMDD
    time_on = ts[11:19].replace(':', '')  # HHMMSS
    fields = [
        f'<CALL:{len(contact.get("callsign", ""))}>{contact.get("callsign", "")}',
        f'<QSO_DATE:8>{qso_date}',
        f'<TIME_ON:6>{time_on}',
        f'<MODE:{len(contact.get("mode", ""))}>{contact.get("mode", "")}',
    ]
    # Add MY_SIG_INFO field from setup_info (park)
    my_sig_info = contact.get('my_sig_info')
    if my_sig_info:
        fields.append(f'<MY_SIG_INFO:{len(my_sig_info)}>{my_sig_info}')
    # Optional fields
    for key, adif_key in adif_map.items():
        val = contact.get(key, '')
        if val and adif_key not in ['CALL', 'MODE']:
            fields.append(f'<{adif_key}:{len(val)}>{val}')
    return ' '.join(fields) + ' <EOR>'


def export_adif(contacts, filename, setup_info=None):
    """
    Export a list of contact dicts to an ADIF file.
    """
    with open(filename, 'w', encoding='utf-8') as f:
        # Write ADIF header
        f.write('Generated by mLogger - https://github.com/nq0m/mLogger\n')
        f.write('<ADIF_VER:5>3.0.5\n')
        f.write('<EOH>\n')
        for contact in contacts:
            adif_fields = {
                'CALL': contact.get('callsign', ''),
                'RST_SENT': contact.get('sent_rst', ''),
                'RST_RCVD': contact.get('recv_rst', ''),
                'FREQ': contact.get('frequency', ''),
                'MODE': contact.get('mode', ''),
                'BAND': contact.get('band', ''),
                'QSO_DATE': contact.get('timestamp', '')[:10].replace('-', ''),
                'TIME_ON': contact.get('timestamp', '')[11:19].replace(':', ''),
                'MY_SIG_INFO': setup_info['activation_park'] if setup_info and 'activation_park' in setup_info else ''
            }
            # Only include SIG_INFO if 'Their Park' is entered
            their_park = contact.get('park', '').strip()
            if their_park:
                adif_fields['SIG_INFO'] = their_park
            # Only include COMMENT if comments field has data
            comment = contact.get('comments', '').strip()
            if comment:
                adif_fields['COMMENT'] = comment
            adif_line = ''
            for k, v in adif_fields.items():
                if v:
                    adif_line += f'<{k}:{len(v)}>{v} '
            adif_line += '<EOR>\n'
            f.write(adif_line)
